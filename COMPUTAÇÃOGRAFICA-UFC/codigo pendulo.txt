#include <GLFW/glfw3.h>
#include <math.h>

#define SCREEN_WIDTH 800
#define SCREEN_HEIGHT 800

#define RADS (2*M_PI/360.0)
#define FRAMERATE 16

int eixoY = (SCREEN_HEIGHT / 4);
int eixoX = (SCREEN_WIDTH / 2);

void CalculateFrameRate()
{
    static float framesPerSecond = 0.0f;
    static int fps;
    static float lastTime = 0.0f;
    float currentTime = GetTickCount() * 0.001f;
    ++framesPerSecond;
    printf("Current Frames Per Second: %d\n\n", fps);
    if (currentTime - lastTime > 1.0f)
    {
        lastTime = currentTime;
        fps = (int)framesPerSecond;
        framesPerSecond = 0;
    }
}

void init()
{
    glViewport( 0.0f, 0.0f, SCREEN_WIDTH, SCREEN_HEIGHT ); // specifies the part of the window to which OpenGL will draw (in pixels), convert from normalised to pixels
    glMatrixMode( GL_PROJECTION ); // projection matrix defines the properties of the camera that views the objects in the world coordinate frame. Here you typically set the zoom factor, aspect ratio and the near and far clipping planes
    glLoadIdentity( ); // replace the current matrix with the identity matrix and starts us a fresh because matrix transforms such as glOrpho and glRotate cumulate, basically puts us at (0, 0, 0)
    glOrtho( 0, SCREEN_WIDTH, 0, SCREEN_HEIGHT, 0, 1 ); // essentially set coordinate system
    glMatrixMode( GL_MODELVIEW ); // (default matrix mode) modelview matrix defines how your objects are transformed (meaning translation, rotation and scaling) in your world
    glLoadIdentity( ); // same as above comment
}

void drawLinha(GLfloat x, GLfloat y, GLfloat z, int cor){
    if(cor == 1){
        glColor4f(1,0,0,1);
    }else if(cor == 2){
        glColor4f(0,1,0,1);
    }else if(cor == 3){
        glColor4f(0,0,1,1);
    }else{
        glColor4f(1,1,0,1);
    }

    glBegin(GL_LINES);
        glVertex3f(400, 600,0);
        glVertex3f(eixoX, eixoY,0);
    glEnd();
}

void drawCircle( GLfloat x, GLfloat y, GLfloat z, GLfloat radius, GLint numberOfSides, int cor)
{
    if(cor == 1){
        glColor4f(1,0,0,1);
    }else if(cor == 2){
        glColor4f(0,1,0,1);
    }else if(cor == 3){
        glColor4f(0,0,1,1);
    }else{
        glColor4f(1,1,0,1);
    }

    int numberOfVertices = numberOfSides + 2;

    GLfloat twicePi = 2.0f * M_PI;

    GLfloat circleVerticesX[numberOfVertices];
    GLfloat circleVerticesY[numberOfVertices];
    GLfloat circleVerticesZ[numberOfVertices];

    circleVerticesX[0] = x;
    circleVerticesY[0] = y;
    circleVerticesZ[0] = z;

    for ( int i = 1; i < numberOfVertices; i++ )
    {
        circleVerticesX[i] = x + ( radius * cos( i *  twicePi / numberOfSides ) );
        circleVerticesY[i] = y + ( radius * sin( i * twicePi / numberOfSides ) );
        circleVerticesZ[i] = z;
    }

    GLfloat allCircleVertices[( numberOfVertices ) * 3];

    for ( int i = 0; i < numberOfVertices; i++ )
    {
        allCircleVertices[i * 3] = circleVerticesX[i];
        allCircleVertices[( i * 3 ) + 1] = circleVerticesY[i];
        allCircleVertices[( i * 3 ) + 2] = circleVerticesZ[i];
    }

    glEnableClientState( GL_VERTEX_ARRAY );
    glVertexPointer( 3, GL_FLOAT, 0, allCircleVertices );
    glDrawArrays( GL_TRIANGLE_FAN, 0, numberOfVertices);
    glDisableClientState( GL_VERTEX_ARRAY );
}

void tecla_esquerda_callback(GLFWwindow* window, int key,int action){
    if(eixoX >=50 && eixoY <= 550){
        if(eixoX > (SCREEN_WIDTH / 2)){
              if (key == GLFW_KEY_LEFT && action == GLFW_PRESS){
                eixoY--;
                eixoX--;
                drawCircle( eixoX, eixoY, 0, 60, 50,3);
             }
            }else{
               if (key == GLFW_KEY_LEFT && action == GLFW_PRESS){
                eixoY++;
                eixoX--;
                drawCircle( eixoX, eixoY, 0, 60, 50,3);
             }
        }
    }else{
        drawCircle( eixoX, eixoY, 0, 60, 50,3);
    }
}

void tecla_direita_callback(GLFWwindow* window, int key,int action){
    if(eixoX <= 750 && eixoY <= 550){
        //pra voltar no mesmo eixo
        if(eixoX < (SCREEN_WIDTH / 2)){
            eixoY--;
            eixoX++;
            drawCircle( eixoX, eixoY, 0, 60, 50,3);
        }else{
            //caso esteja padrao
            if (key == GLFW_KEY_RIGHT && action == GLFW_PRESS){
                eixoY++;
                eixoX++;
                drawCircle( eixoX, eixoY, 0, 60, 50,3);
            }
        }
    }else{
        drawCircle( eixoX, eixoY, 0, 60, 50,3);
    }

}

void tecla_esquerda_callback2(GLFWwindow* window){
        //pra voltar no mesmo eixo
        if(eixoX < 400 && eixoY > 200){
            eixoY--;
            eixoX++;
            drawCircle( eixoX, eixoY, 0, 60, 50,3);
        }else{
            //caso esteja padrao
            drawCircle( eixoX, eixoY, 0, 60, 50,3);
        }
}

void tecla_direita_callback2(GLFWwindow* window){
        //pra voltar no mesmo eixo
        if(eixoX > 400 && eixoY > 200){
            eixoY--;
            eixoX--;
            drawCircle( eixoX, eixoY, 0, 60, 50,3);
        }else{
            //caso esteja padrao
            drawCircle( eixoX, eixoY, 0, 60, 50,3);
        }
}

int main( void )
{
    GLFWwindow *window;

    // Initialize the library
    if ( !glfwInit( ) )
    {
        return -1;
    }

    // Create a windowed mode window and its OpenGL context
    window = glfwCreateWindow( SCREEN_WIDTH, SCREEN_HEIGHT, "Hello World", NULL, NULL );

    if ( !window )
    {
        glfwTerminate( );
        return -1;
    }

    // Make the window's context current
    glfwMakeContextCurrent( window );
    glfwSwapInterval(1);

    init();
    glfwSetKeyCallback(window, tecla_esquerda_callback);
    glfwSetKeyCallback(window, tecla_direita_callback);


    // Loop until the user closes the window
    while ( !glfwWindowShouldClose( window ) )
    {
        CalculateFrameRate();
        glClear( GL_COLOR_BUFFER_BIT );
        glClearColor(1.0, 1.0, 1.0, 1.0);

        // render OpenGL here

        int state = glfwGetKey(window, GLFW_KEY_LEFT);
        if(state == GLFW_PRESS){
            glClear( GL_COLOR_BUFFER_BIT );
            glClearColor(1.0, 1.0, 1.0, 1.0);
            drawLinha(eixoX,eixoY,0,1);
            tecla_esquerda_callback(window,GLFW_KEY_LEFT, GLFW_PRESS);
        }else{
            glClear( GL_COLOR_BUFFER_BIT );
            glClearColor(1.0, 1.0, 1.0, 1.0);
            drawLinha(eixoX,eixoY,0,1);
            tecla_esquerda_callback2(window);
        }

        int state2 = glfwGetKey(window, GLFW_KEY_RIGHT);
        if (state2 == GLFW_PRESS)
        {
            glClear( GL_COLOR_BUFFER_BIT );
            glClearColor(1.0, 1.0, 1.0, 1.0);
            drawLinha(eixoX,eixoY,0,1);
            tecla_direita_callback(window,GLFW_KEY_RIGHT, GLFW_PRESS);
        }else{
            glClear( GL_COLOR_BUFFER_BIT );
            glClearColor(1.0, 1.0, 1.0, 1.0);
            drawLinha(eixoX,eixoY,0,1);
            tecla_direita_callback2(window);
        }
        //drawCircle( SCREEN_WIDTH / 2, SCREEN_HEIGHT / 4, 0, 60, 50 );

        // Swap front and back buffers
        glfwSwapBuffers( window );

        // Poll for and process events
        glfwPollEvents( );
    }

    glfwTerminate( );

    return 0;
}